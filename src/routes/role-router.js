'use strict';

const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const error403 = require('../middleware/403');
const error401 = require('../middleware/401');
const authorize = require('../middleware/authorize');



/**
 * Public is available to any user
 * @route GET public
 * @returns {object} 200 - Notifies the user they are allowed to access this route
 */
router.get('/public', (req, res, next) => {
  res.status(200).json({ valid: true });
});

router.use(auth);
router.use(error401);




// === TODO: Define all the routes below ======

/**
 * Route hidden is only accessible by logged in users 
 * @route GET /hidden
 * @param req.user._id - The id of an authenticated user 
 * @returns {object} 200 - The user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.get('/hidden', (req, res, next) => {
  if (req.user && req.user._id) res.status(200).json({ valid: true });
  else next('Forbidden');
});

//Enabling the authorize middleware for all of the following routes
router.use(authorize);


/**
 * Route read-only is only accessible by users with read capabilities
 * @route GET /read-only
 * @param req.headers.authorized - A boolean value generated by the authorize middleware
 * @returns {object} 200 - The user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.get('/read-only', (req, res, next) => {
  if (req.headers.authorized) res.status(200).json({ valid: true });
  else next('Forbidden');
});

/**
 * Route create is only accessible by users with create capabilities
 * @route POST /create/
 * @param req.headers.authorized - A boolean value generated by the authorize middleware
 * @returns {object} 200 - The user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.post('/create', (req, res, next) => {
  if (req.headers.authorized) res.status(200).json({ valid: true });
  else next('Forbidden');
});
/**
 * Route update is only accessible by users with update capabilities
 * @route PUT /update/:id
 * @param req.headers.authorized - A boolean value generated by the authorize middleware
 * @returns {object} 200 - The user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.put('/update/:id', (req, res, next) => {
  if (req.headers.authorized) res.status(200).json({ valid: true });
  else next('Forbidden');
});


/**
 * Route delete is only accessible by users with delete capabilities
 * @route DELETE /delete/:id
 * @param req.headers.authorized - A boolean value generated by the authorize middleware
 * @returns {object} 200 - The user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.delete('/delete/:id', (req, res, next) => {
  if (req.headers.authorized) res.status(200).json({ valid: true });
  else next('Forbidden');
});


/**
 * Route super is only accessible by users with superuser capabilities
 * @route GET /super
 * @param req.headers.authorized - A boolean value generated by the authorize middleware
 * @returns {object} 200 - The response the client gives if the user is authorized to use this route
 * @returns {error} 403 - Forbidden error if the user is not authorized to use this route
 */
router.get('/super', (req, res, next) => {
  if (req.headers.authorized) res.status(200).json({ valid: true });
  else next('Forbidden');
});

router.use(error403);

module.exports = router;
